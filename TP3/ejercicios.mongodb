use("tiendaOnline");

// ------------------- Ejercicio 1: Filtrado básico con $match -------------------
//Objetivo:
//Practicar el uso de $match para filtrar documentos.

//Etapa del Pipeline:
//$match */

// Encontrar todos los productos de la categoría "Electrónica" con un precio superior a 500.
db.productos.aggregate({
  $match: {
    categoria: "Electrónica",
    precio: { $gt: 500 },
  },
});

// Encontrar todas las ventas realizadas a clientes de "España" que tengan estado "Entregado".
db.ventas.aggregate({
  $match: {
    "cliente.pais": "España",
    estado: "Entregado",
  },
});

// ------------------- Ejercicio 2: Agrupación y agregación con $group -------------------
//Objetivo:
//Utilizar $group para agrupar documentos y aplicar operadores de acumulación.

//Etapas del Pipeline:
//$group, $sort

//Calcular el precio promedio, máximo y mínimo por categoría de producto.
db.productos.aggregate([
  {
    $group: {
      _id: "$categoria",
      precioPromedio: { $avg: "$precio" },
      precioMaximo: { $max: "$precio" },
      precioMinimo: { $min: "$precio" },
    },
  },
  {
    $sort: {
      precioPromedio: -1,
      precioMinimo: -1,
      precioMaximo: -1,
    },
  },
]);

//Obtener el total de ventas por país del cliente, incluyendo la cantidad de transacciones y el monto total.

db.ventas.aggregate([
  {
    $group: {
      _id: "$cliente.pais",
      totalVentas: { $sum: "$total" },
      cantidadTransacciones: { $sum: 1 },
    },
  },
  {
    $sort: {
      totalVentas: -1,
    },
  },
]);

// ------------------- Ejercicio 3: Transformación de documentos con $project -------------------
// Objetivo:
// Transformar la estructura de los documentos utilizando $project.

// Para la colección de ventas, crear una proyección que incluya el ID de venta, el nombre del cliente, el total y una nueva propiedad "descuento" que sea el 10% del total.
// Etapas del Pipeline:
// $project

// Crear una proyección de productos que incluya solo el nombre, precio, y una nueva propiedad llamada "precioConImpuesto" que sea el precio + 21% de IVA.
db.productos.aggregate([
  {
    $project: {
      nombre: 1,
      precio: 1,
      precioConImpuesto: {
        $round: [
          {
            $multiply: ["$precio", 1.21],
          },
          2,
        ],
      },
    },
  },
]);

// -------------------Ejercicio 4: Deconstrucción de arrays con $unwind -------------------
// Objetivo:
// Comprender y aplicar $unwind para trabajar con arrays.

// Etapas del Pipeline:
// $unwind, $group, $sort

// Deconstruir el array de valoraciones de productos para obtener una lista plana donde cada documento contenga una valoración individual.

// Luego, agrupar por puntuación y contar cuántas valoraciones hay de cada puntuación.

db.productos.aggregate([
  {
    $unwind: {
      path: "$valoraciones",
    },
  },
  {
    $group: {
      _id: "$valoraciones.puntuacion",
      totalValoraciones: { $sum: 1 },
    },
  },
  {
    $project: {
      _id: 0,
      puntuacion: "$_id",
      totalValoraciones: 1,
    },
  },
  {
    $sort: {
      puntuacion: -1,
    },
  },
]);

// ------------------- Ejercicio 5: Combinación de colecciones con $lookup -------------------
// Objetivo:
// Aprender a realizar operaciones de "join" con $lookup.

// Etapas del Pipeline:
// $lookup, $project, $group

// Enriquecer cada documento de ventas con la información completa del producto vendido (mediante un lookup a la colección productos).

// Calcular el total vendido por categoría de producto.
db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $group: {
      _id: "$producto.categoria",
      totalVendido: { $sum: "$total" },
    },
  },
  {
    $project: {
      _id: 0,
      categoria: { $arrayElemAt: ["$_id", 0] },
      totalVendido: 1,
    },
  },
]);

// ------------------- Ejercicio 6: Trabajo con fechas -------------------
// Objetivo:
// Practicar con operadores de fecha en el pipeline de agregación.

// Etapas del Pipeline:
// $project, $group, $sort

// Agrupar las ventas por mes y calcular el total vendido en cada mes.

db.ventas.aggregate([
  {
    $group: {
      _id: {$month: "$fecha"},
      totalVendido: { $sum: "$total" },
    },
  },
  {
    $project: {
      _id: 0,
      mes: "$_id",
      totalVendido: 1,
    },
  },
  {
    $sort: {
      totalVendido: -1,
    },
  },
]);



// Encontrar el día de la semana con más ventas.

 db.ventas.aggregate([
  {
    $group: {
      _id: { $dayOfWeek: "$fecha" },
      totalVendido: { $sum: "$total" },
    },
  },
  {
    $sort: {
      totalVendido: -1,
    },
  },
  {
    $project: {
      _id: 0,
      diaSemana: "$_id",
      totalVendido: 1,
    },
  },
  {
    $limit: 1
  }
]) 

