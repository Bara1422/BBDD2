use("tiendaOnline");

// --------- Problema 1 ---------
//Crear un pipeline que obtenga los productos más valorados (puntuación promedio más alta) con al menos 2 valoraciones.

db.productos.aggregate([
  {
    $unwind: {
      path: "$valoraciones",
    },
  },
  {
    $group: {
      _id: "$_id",
      valoracionPromedio: { $avg: "$valoraciones.puntuacion" },
      cantidadValoraciones: { $sum: 1 },
    },
  },
  {
    $match: {
      cantidadValoraciones: { $gte: 2 },
    },
  },
  {
    $sort: {
      valoracionPromedio: -1,
    },
  },
]);

// --------- Problema 2 ---------
// Crear un pipeline que obtenga las ventas totales por mes, indicando también el producto más vendido de cada mes.

db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $group: {
      _id: { $month: "$fecha" },
      totalVentas: { $sum: "$total" },
      productoMasVendido: { $max: "$producto" },
      vecesVendido: { $sum: 1 },
    },
  },
  {
    $project: {
      _id: 0,
      mes: "$_id",
      totalVentas: 1,
      productoMasVendido: { $arrayElemAt: ["$productoMasVendido.nombre", 0] },
      vecesVendido: 1,
    },
  },
]);

//Problema 3
// Crear un informe de clientes que incluya:

// 1. Total gastado por cada cliente ✅
// 2. Número de compras realizadas ✅
// 3. Producto favorito (el que más ha comprado) ✅
// 4. Categoría preferida (donde más ha gastado) ✅
// 5. Fecha de primera y última compra ✅

db.ventas.aggregate([
  // Unimos las ventas con los productos
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  // Bajamos un nivel de profundidad en producto
  {
    $unwind: {
      path: "$producto",
    },
  },
  // Agrupamos por cliente y categoria
  {
    $group: {
      _id: {
        email: "$cliente.email",
        categoria: "$producto.categoria",
      },
      totalGastadoPorCategoria: { $sum: "$total" },
      // Creamos un helper para guardar la informacion de cada compra
      helper: {
        $push: {
          cantidad: "$cantidad",
          total: "$total",
          producto: "$producto.nombre",
          fecha: "$fecha",
        },
      },
    },
  },
  // Ordenamos por total gastado por categoria de manera descendente
  {
    $sort: {
      totalGastadoPorCategoria: -1,
    },
  },
  // Agrupamos por email y obtenemos la categoria favorita y los datos guardados
  {
    $group: {
      _id: "$_id.email",
      categoriaFavorita: { $first: "$_id.categoria" },
      gastoEnCategoriaFavorita: { $first: "$totalGastadoPorCategoria" },
      helper: { $first: "$helper" },
    },
  },
  // Bajamos un nivel de profundidad en helper
  {
    $unwind: "$helper",
  },
  // Agrupamos por los campos requeridos
  {
    $group: {
      _id: "$_id",
      categoriaFavorita: { $first: "$categoriaFavorita" },
      gastoEnCategoriaFavorita: { $first: "$gastoEnCategoriaFavorita" },
      comprasRealizadas: { $sum: 1 },
      cantidadUnidadesTotales: { $sum: "$helper.cantidad" },
      totalGastado: { $sum: "$helper.total" },
      productoFavorito: { $max: "$helper.producto" },
      fechaPrimeraCompra: { $min: "$helper.fecha" },
      fechaUltimaCompra: { $max: "$helper.fecha" },
    },
  },
  // Proyectamos la informacion
  {
    $project: {
      _id: 1,
      categoriaFavorita: 1,
      gastoEnCategoriaFavorita: 1,
      comprasRealizadas: 1,
      cantidadUnidadesTotales: 1,
      totalGastado: 1,
      productoFavorito: 1,
      fechaPrimeraCompra: 1,
      fechaUltimaCompra: 1,
    },
  },
]);

// SIN PUNTO 4
/* db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $unwind: {
      path: "$producto",
    },
  },
  {
    $group: {
      _id: "$cliente.email",
      comprasRealizadas: { $sum: 1 },
      cantidadUnidadesTotales: { $sum: "$cantidad" },
      totalGastado: { $sum: "$total" },
      productoFavorito: { $max: "$producto.nombre" },
      fechaPrimeraCompra: { $min: "$fecha" },
      fechaUltimaCompra: { $max: "$fecha" },
    },
  }
]); */

// Problema 4 (Desafío)
// Crear un sistema de recomendación básico que, para un cliente dado, recomiende productos basándose en:

// Productos de la misma categoría que ha comprado anteriormente
db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $unwind: {
      path: "$producto",
    },
  },
  {
    $group: {
      _id: "$cliente.email",
      categoriaRecomendada: { $addToSet: "$producto.categoria" },
    },
  },
  {
    $lookup: {
      from: "productos",
      let: { categorias: "$categoriaRecomendada" },
      pipeline: [
        {
          $match: {
            $expr: { $in: ["$categoria", "$$categorias"] },
          },
        },
      ],
      as: "productosRecomendados",
    },
  },

  // Resultado final
  {
    $project: {
      _id: 1,
      email: "$_id",
      categoriaRecomendada: 1,
      productosRecomendados: {
        nombre: 1,
        categoria: 1,
        precio: 1,
        stock: 1,
        valoraciones: 1,
      },
    },
  },
]);

// Productos populares (más vendidos) que no ha comprado aún
db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $unwind: "$producto",
  },
  {
    $group: {
      _id: "$cliente.email",
      productosComprados: { $addToSet: "$producto.nombre" },
    },
  },
  {
    $lookup: {
      from: "productos",
      let: { productosComprados: "$productosComprados" },
      pipeline: [
        {
          $match: {
            $expr: { $not: { $in: ["$nombre", "$$productosComprados"] } },
          },
        },
      ],
      as: "productosPopulares",
    },
  },
  {
    $project: {
      _id: 1,
      email: "$_id",
      productosComprados: 1,
      productosPopulares: {
        nombre: 1,
        categoria: 1,
        precio: 1,
        stock: 1,
        valoraciones: 1,
      },
    },
  },
]);

// Productos mejor valorados en las categorías de su interés
db.ventas.aggregate([
  {
    $lookup: {
      from: "productos",
      localField: "producto_id",
      foreignField: "_id",
      as: "producto",
    },
  },
  {
    $unwind: "$producto",
  },
  {
    $group: {
      _id: "$cliente.email",
      categoriasInteres: { $addToSet: "$producto.categoria" },
    }
  },
  {
    $lookup: {
      from: "productos",
      let: { categorias: "$categoriasInteres" },
      pipeline: [
        {
          $match: {
            $expr: { $in: ["$categoria", "$$categorias"] },
          },
        },
        {
          $addFields: {
            promedioValoracion: {
              $avg: "$valoraciones.puntuacion",
            },
          }
        }
      ],
      as: "productosInteres",
    },
  },
  {
    $project: {
      _id: 1,
      email: "$_id",
      categoriasInteres: 1,
      productosInteres: {
        nombre: 1,
        categoria: 1,
        precio: 1,
        stock: 1,
        promedioValoracion: 1,
      }
    }
  },
  {
    $sort: {
      "productosInteres.promedioValoracion": -1
    }
  },
])